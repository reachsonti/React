{"ast":null,"code":"import { ACTION_TYPES } from \"../actions/dCandidate\";\nconst initialState = {\n  list: []\n};\n\n//this below code defines reducer for fetchall option.\n//action parameter will have type : ACTION_TYPES.FETCH_ALL from actions -> dCandidate.js\n//state parameter we need to tell what information we need to store in redux\nexport const dCandidate = (state = initialState, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.FETCH_ALL:\n      //data from this return is updated to redux to store\n      return {\n        ...state,\n        //this will replace all the existing data in state with new data\n        list: [...action.payload]\n      };\n    case ACTION_TYPES.CREATE:\n      //data from this return is updated to redux to store\n      return {\n        ...state,\n        //this will replace all the existing data in state with new data\n        list: [...state.list, action.payload]\n      };\n    case ACTION_TYPES.CREATE:\n      //data from this return is updated to redux to store\n      return {\n        ...state,\n        //this will replace all the existing data in state with new data\n        list: state.list.map(x => x.id == action.payload.id)\n      };\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["ACTION_TYPES","initialState","list","dCandidate","state","action","type","FETCH_ALL","payload","CREATE","map","x","id"],"sources":["D:/Srinath/WorkSpace/React/React-CRUD-with-Asp.Net-Core-Web-API-master/react-app/src/reducers/dCandidate.js"],"sourcesContent":["import { ACTION_TYPES } from \"../actions/dCandidate\";\r\nconst initialState={\r\n    list:[]\r\n}\r\n\r\n//this below code defines reducer for fetchall option.\r\n//action parameter will have type : ACTION_TYPES.FETCH_ALL from actions -> dCandidate.js\r\n//state parameter we need to tell what information we need to store in redux\r\nexport const dCandidate  =(state=initialState,action) =>{\r\n    switch (action.type) {\r\n        case ACTION_TYPES.FETCH_ALL:\r\n            //data from this return is updated to redux to store\r\n            return {\r\n                ...state,//this will replace all the existing data in state with new data\r\n                list: [...action.payload]\r\n            }\r\n        case ACTION_TYPES.CREATE:\r\n            //data from this return is updated to redux to store\r\n            return {\r\n                ...state,//this will replace all the existing data in state with new data\r\n                list: [...state.list, action.payload]\r\n            }\r\n        \r\n        case ACTION_TYPES.CREATE:\r\n            //data from this return is updated to redux to store\r\n            return {\r\n                ...state,//this will replace all the existing data in state with new data\r\n                list: state.list.map(x=>x.id == action.payload.id)\r\n            }\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,uBAAuB;AACpD,MAAMC,YAAY,GAAC;EACfC,IAAI,EAAC;AACT,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAGA,CAACC,KAAK,GAACH,YAAY,EAACI,MAAM,KAAI;EACpD,QAAQA,MAAM,CAACC,IAAI;IACf,KAAKN,YAAY,CAACO,SAAS;MACvB;MACA,OAAO;QACH,GAAGH,KAAK;QAAC;QACTF,IAAI,EAAE,CAAC,GAAGG,MAAM,CAACG,OAAO;MAC5B,CAAC;IACL,KAAKR,YAAY,CAACS,MAAM;MACpB;MACA,OAAO;QACH,GAAGL,KAAK;QAAC;QACTF,IAAI,EAAE,CAAC,GAAGE,KAAK,CAACF,IAAI,EAAEG,MAAM,CAACG,OAAO;MACxC,CAAC;IAEL,KAAKR,YAAY,CAACS,MAAM;MACpB;MACA,OAAO;QACH,GAAGL,KAAK;QAAC;QACTF,IAAI,EAAEE,KAAK,CAACF,IAAI,CAACQ,GAAG,CAACC,CAAC,IAAEA,CAAC,CAACC,EAAE,IAAIP,MAAM,CAACG,OAAO,CAACI,EAAE;MACrD,CAAC;IAEL;MACI,OAAOR,KAAK;EACpB;AAEJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}